#создаем пространство имен кафка
apiVersion: v1
kind: Namespace
metadata:
  name: kafka
---
# Persistent Volume Claim для PostgreSQL
apiVersion: v1 # версия API Kubernetes используемая для работы с обьектами
kind: PersistentVolumeClaim #kind/добрый clime/запрос Тип обьекта в Kubernetes. PersistentVolumeClaim - заявляет о необходимости выделения хранилища
metadata:
  name: postgres-pv-claim
  namespace: kafka
spec: #spec/спекуляция спецификация для запроса на хранилище
  accessModes: #accessModes/режимы доступа
    - ReadWriteOnce # - может быть примонтировано только одним узлом
  resources:
    requests:
      storage: 1Gi # запрашиваем выделение памяти на 1гб
---
# Сервис для PostgreSQL
apiVersion: v1
kind: Service #kind/добрый clime/запрос Service - обьект,который предоставляет сутевой доступ к набору подов(контейнеров)
metadata:
  name: postgres #Имя сервиса postgres
  namespace: kafka
spec: # Спецификация сервиса
  ports:
    - port: 5432
      targetPort: 5432
  selector: # Указывает что этот сервис будет направлять трафик к подам с меткой app: postgres
    app: postgres
---
# Деплоймент для PostgreSQL
apiVersion: apps/v1
kind: Deployment #kind/добрый обьект который управляет подами
metadata:
  name: postgres # имя деплоймента postgres
  namespace: kafka
spec: # спецификация деплоймента
  replicas: 1 # количество реплик подов
  selector: # Указывает на метку, по которой деплоймент будет находить поды (app: postgres)
    matchLabels:
      app: postgres
  template: # определяет шаблон для создания подов
    metadata: # метка для подов - app: postgres
      labels: # labels/этикетки
        app: postgres
    spec:
      containers: # описание контейнера для PostgreSQL
        - name: postgres # имя контейнера
          image: postgres:13 # используемый Docker-образ - postgres:13
          env: # подключение к бд
            - name: POSTGRES_DB
              value: productTest
            - name: POSTGRES_USER
              value: productUser
            - name: POSTGRES_PASSWORD
              value: productPassword
          ports:
            - containerPort: 5432
          volumeMounts: # volumeMounts/установка обьема - Монтирование тома для хранения данных PostgreSQL в директорию /var/lib/postgresql/data
            - mountPath: "/var/lib/postgresql/data"
              name: postgres-storage
      volumes: # указиваем том, который будет монтироватся.
        - name: postgres-storage
          persistentVolumeClaim: # Здесь это том, полученный через PersistentVolumeClaim с именем postgres-pv-claim
            claimName: postgres-pv-claim
---
#Сервис для Zookeeper
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: kafka
spec:
  ports:
    - port: 2181
      targetPort: 2181
  selector:
    app: zookeeper
---
# Деплоймент для zookeeper
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
  namespace: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - name: zookeeper
          image: bitnami/zookeeper:3.8.0
          imagePullPolicy: Always
          env:
            - name: ALLOW_ANONYMOUS_LOGIN
              value: "yes"
            - name: ZOOKEEPER_CLIENT_PORT
              value: "2181"
            - name: ZOOKEEPER_TICK_TIME
              value: "2000"
          ports:
            - containerPort: 2181
---
# Сервис для Kafka
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: kafka
spec:
  ports:
    - port: 9092
      targetPort: 9092
  selector:
    app: kafka
---
#Деплоймент для kafka
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
  namespace: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
        - name: kafka
          image: bitnami/kafka:3.2.0
          imagePullPolicy: Always
          env:
            - name: KAFKA_CFG_BROKER_ID
              value: "1"
            - name: KAFKA_CFG_ZOOKEEPER_CONNECT
              value: "zookeeper:2181"
            - name: KAFKA_CFG_LISTENERS
              value: "PLAINTEXT://:9092"
            - name: KAFKA_CFG_ADVERTISED_LISTENERS
              value: "PLAINTEXT://kafka.kafka.svc.cluster.local:9092"
            - name: KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
            - name: ALLOW_PLAINTEXT_LISTENER
              value: "yes"
          ports:
            - containerPort: 9092
---
# Сервис для приложения newKafka
apiVersion: v1
kind: Service
metadata:
  name: micro1
  namespace: kafka
spec:
  type: NodePort
  selector:
    app: micro1
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
      nodePort: 30080

---
# Деплоймент для приложения newKafka
apiVersion: apps/v1
kind: Deployment
metadata:
  name: micro1
  namespace: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app: micro1
  template:
    metadata:
      labels:
        app: micro1
    spec:
      containers:
        - name: micro1
          image: uvanprihotko/demo-app:latest
          ports:
            - containerPort: 8080
          env:
            - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://postgres:5432/productTest
            - name: SPRING_DATASOURCE_USERNAME
              value: productUser
            - name: SPRING_DATASOURCE_PASSWORD
              value: productPassword
            - name: SPRING_JPA_HIBERNATE_DDL_AUTO
              value: create
            - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
              value: kafka.kafka.svc.cluster.local:9092
---
# Сервис для микросервиса micro2
apiVersion: v1
kind: Service
metadata:
  name: micro2
  namespace: kafka
spec:
  type: NodePort
  selector:
    app: micro2
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 8080
      nodePort: 30081
---
# Деплоймент для микросервиса micro2
apiVersion: apps/v1
kind: Deployment
metadata:
  name: micro2
  namespace: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app: micro2
  template:
    metadata:
      labels:
        app: micro2
    spec:
      containers:
        - name: micro2
          image: uvanprihotko/demo-micro2:latest
          ports:
            - containerPort: 8080
          env:
            - name: SPRING_KAFKA_BOOTSTRAP_SERVERS
              value: kafka.kafka.svc.cluster.local:9092





